type @B = {a: i32}
interface @Foo {
 fn @foo(this: This, a: i32): Self {...}
}
interface @Baz {
 fn @baz(this: This, a: Self): Self {...}
}
class @Bar(@B) {
 fn @foo(this: @B, a: i32): Itf @Foo {...}
}
class @Qux(@B) {
 fn @baz(this: @B, a: Itf @Baz): Itf @Baz {...}
}
fn @foo(%this: @B, %a: i32): Itf @Foo [parent=Bar] {
 %0: String = call @__rts_int_to_string(%a: i32)
 %1: String = constant(""\n"")
 %2: String = call @__rts_string_concat(%0: String, %1: String)
 %3: () = call @__rts_string_print(%2: String)
 %4: i32 = getattr[@a, idx=Some(0)](%this: @B)
 %5: String = call @__rts_int_to_string(%4: i32)
 %6: String = constant(""\n"")
 %7: String = call @__rts_string_concat(%5: String, %6: String)
 %8: () = call @__rts_string_print(%7: String)
 %9: i32 = getattr[@a, idx=Some(0)](%this: @B)
 %10: i32 = constant(1)
 %11: i32 = add(%a: i32, %10: i32)
 assign(%9: i32, %11: i32)
 return(%this: @B)
}  
fn @baz(%this1: @B, %a1: Itf @Baz): Itf @Baz [parent=Qux] {
 %12: i32 = getattr[@a, idx=Some(0)](%this1: @B)
 %13: i32 = getattr[@a, idx=Some(0)](%this1: @B)
 %14: i32 = constant(1)
 %15: i32 = add(%13: i32, %14: i32)
 assign(%12: i32, %15: i32)
 %16: Itf @Baz = cls_ctor @Qux(%this1: @B)
 %17: Itf @Baz = call @%a1: Itf @Bazbaz(%16: Itf @Baz)
 return(%17: Itf @Baz)
}  
fn @main(): () {
 %18: () = call @__rts_gc_init()
 %19: String = constant(""hello world\n"")
 %20: () = call @__rts_string_print(%19: String)
 %b: i32 = constant(3)
 %b1: @B = struct_ctor(%b: i32)
 %b2: Itf @Foo = cls_ctor @Bar(%b1: @B)
 %b3: Itf @Foo = let %b2: Itf @Foo
 %21: i32 = constant(1)
 %22: Itf @Foo = call @%b3: Itf @Foofoo(%21: i32)
 %23: i32 = constant(2)
 %24: Itf @Foo = call @%b3: Itf @Foofoo(%23: i32)
 %25: () = call @__rts_gc_destroy()
}  
fn @__rts_gc_init(): () { builtin! }
fn @__rts_gc_destroy(): () { builtin! }
fn @__rts_gc_alloc(@ptrNone, i32): @ptrNone { builtin! }
fn @__rts_get_data(@ptrNone): @ptrNone { builtin! }
fn @__rts_new_string(i32, @ptrNone): String { builtin! }
fn @__rts_string_length(String): i32 { builtin! }
fn @__rts_string_data(String): i32 { builtin! }
fn @__rts_string_print(String): () { builtin! }
fn @__rts_string_concat(String, String): String { builtin! }
fn @__rts_int_to_string(i32): String { builtin! }
