// invoking various dispatcher classes for parametric polymorphism
interface I1 {
    fn hello(this)
}

type T1 = {a: i32}

class c1 for I1(T1) {
    fn hello(this) {
        print("c1: ");
        print(to_str(this.a));
        print("\n");
    }
}


class c2 for I1(T1) {
    fn hello(this) {
        print("c2: ");
        print(to_str(this.a));
        print("\n");
    }
}

// classic parametric polymorphism
fn say_hello[T](x: T) where I1(T) {
    x.hello();
}

// natural class
fn say_hello2(x: I1) {
    x.hello();
}

// explicit class
fn say_hello3[T](x: T) where c for I1(T) {
    x.(c.hello)();
}

fn main() {
    let a: I1 = c1({a: 1});
    let b: I1 = c2({b: 1});

    say_hello[T1 with c1]({a: 1});
    say_hello[T1 with c2]({a: 1});
    say_hello(a);
    say_hello(b);

    say_hello2(a);
    say_hello2(b);
    
    say_hello3(a);
    say_hello3(b);
}
