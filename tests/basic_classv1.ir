type @B = {a: i32}
interface @Foo {
 fn @foo(this: This, a: i32): Self {...}
}
interface @Baz {
 fn @baz(this: This, a: Self): Self {...}
}
class @Bar(@B) {
 fn @foo(this: @B, a: i32): Itf @Foo {...}
}
class @Qux(@B) {
 fn @baz(this: @B, a: Itf @Baz): Itf @Baz {...}
}
fn @foo(%this: @B, %a: i32): Itf @Foo [parent=Bar] {
 %0: String = call @__rts_int_to_string(%a: i32)
 %1: () = call @__rts_string_print(%0: String)
 %2: i32 = getattr[@a, idx=Some(0)](%this: @B)
 %3: i32 = constant(1)
 %4: i32 = add(%a: i32, %3: i32)
 assign(%2: i32, %4: i32)
 return(%this: @B)
}  
fn @baz(%this1: @B, %a1: Itf @Baz): Itf @Baz [parent=Qux] {
 %5: i32 = getattr[@a, idx=Some(0)](%this1: @B)
 %6: i32 = getattr[@a, idx=Some(0)](%this1: @B)
 %7: i32 = constant(1)
 %8: i32 = add(%6: i32, %7: i32)
 assign(%5: i32, %8: i32)
 %9: Itf @Baz = cls_ctor @Qux(%this1: @B)
 %10: Itf @Baz = call @%a1: Itf @Bazbaz(%9: Itf @Baz)
 return(%10: Itf @Baz)
}  
fn @main(): () {
 %11: () = call @__rts_gc_init()
 %b: i32 = constant(3)
 %b1: @B = struct_ctor(%b: i32)
 %b2: Itf @Foo = cls_ctor @Bar(%b1: @B)
 %b3: Itf @Foo = let %b2: Itf @Foo
 %12: i32 = constant(1)
 %13: Itf @Foo = call @%b3: Itf @Foofoo(%12: i32)
 %14: () = call @__rts_gc_destroy()
}  
fn @__rts_gc_init(): () { builtin! }
fn @__rts_gc_destroy(): () { builtin! }
fn @__rts_gc_alloc(@ptrNone, i32): @ptrNone { builtin! }
fn @__rts_new_string(i32, @ptrNone): String { builtin! }
fn @__rts_string_length(String): i32 { builtin! }
fn @__rts_string_data(String): i32 { builtin! }
fn @__rts_string_print(String): () { builtin! }
fn @__rts_string_concat(String, String): String { builtin! }
fn @__rts_int_to_string(i32): String { builtin! }
