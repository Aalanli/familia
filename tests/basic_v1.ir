type @T = {a: i32, b: i32}
type @R = {a: @T, b: i32}
fn @foo(%a: @T, %b: @R): i32 {
 %0: i32 = getattr[@a, idx=Some(0)](%a: @T)
 %1: @T = getattr[@a, idx=Some(0)](%b: @R)
 %2: i32 = getattr[@b, idx=Some(1)](%1: @T)
 %3: i32 = add(%0: i32, %2: i32)
 return(%3: i32)
}  
fn @main(): () {
 %4: () = call @__rts_gc_init()
 %a1: i32 = constant(1)
 %a2: i32 = constant(2)
 %a3: @T = struct_ctor(%a1: i32, %a2: i32)
 %a4: @T = let %a3: @T
 %b1: i32 = constant(3)
 %b2: i32 = constant(4)
 %b3: @T = struct_ctor(%b1: i32, %b2: i32)
 %b4: i32 = constant(5)
 %b5: @R = struct_ctor(%b3: @T, %b4: i32)
 %b6: @R = let %b5: @R
 %c: i32 = call @foo(%a4: @T, %b6: @R)
 %c1: i32 = let %c: i32
 %5: () = call @__rts_gc_destroy()
}  
fn @__rts_gc_init(): () { builtin! }
fn @__rts_gc_destroy(): () { builtin! }
fn @__rts_gc_alloc(@ptrNone, i32): @ptrNone { builtin! }
fn @__rts_new_string(i32, @ptrNone): String { builtin! }
fn @__rts_string_length(String): i32 { builtin! }
fn @__rts_string_data(String): i32 { builtin! }
fn @__rts_string_print(String): () { builtin! }
fn @__rts_string_concat(String, String): String { builtin! }
fn @__rts_int_to_string(i32): String { builtin! }
