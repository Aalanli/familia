
program : (typedef | function_def | class_def | interface_def)*

type : "()" -> void
    | "i32" -> i32
    | "This" -> this_t
    | "Self" -> self_t
    | NAME -> custom_type

term : "this" -> this
    | "self" -> self
    | NAME -> var
    | SIGNED_NUMBER -> number

typedef : "type" NAME "=" "{" [arg] ("," arg)* "}"

arg : NAME ":" type

function_decl : "fn" NAME "(" [arg] ("," arg)* ")" [":" NAME] 
function_def : function_decl "{" stmt* "}"

class_def : "class" NAME "for" NAME "{" (typedef | function_def)* "}"
interface_def : "interface" NAME "{" function_decl* "}"

stmt : 
    | decl_stmt
    | return_stmt

decl_stmt : "let" NAME "=" expr ";"
return_stmt : "return" expr ";"

expr :
    | "(" expr ")"
    | term
    | numeric_expr
    | expr "." NAME ["(" [expr] ("," expr)* ")"]
    | NAME "(" [expr] ("," expr)* ")"


numeric_expr : term bin_op term 
    | term bin_op "(" expr ")"
    | "(" expr ")" bin_op term
    | "(" expr ")" bin_op "(" expr ")"

bin_op : "+" -> add
    | "-" -> sub
    | "*" -> mul
    | "/" -> div

NAME: /[^\W\d]\w*/
%import common.SIGNED_NUMBER

%import common.WS
%ignore WS