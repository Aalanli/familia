
program : (typedef | function_def | class_def | interface_def)*

type : "()" -> void
    | "i32" -> i32
    | "This" -> this_t
    | "Self" -> self_t
    | NAME -> custom_type

term : "this" -> this
    | "self" -> self
    | NAME -> var
    | SIGNED_NUMBER -> number

typedef : "type" NAME "=" "{" [arg] ("," arg)* "}"

arg : 
    | NAME ":" type -> arg
    | "this" -> this_arg

function_decl : "fn" NAME "(" [arg] ("," arg)* ")" [":" type] 
function_def : function_decl "{" stmt* "}"

class_def : "class" NAME "for" NAME "{" (typedef | function_def)* "}"
interface_def : "interface" NAME "{" function_decl* "}"

?stmt : 
    | expr ";" -> expr_stmt
    | "let" (NAME | arg) "=" expr ";" -> let_stmt
    | "return" expr ";" -> return_stmt


?expr :
    | term
    | "(" expr bin_op expr ")" -> bin_op_expr
    | expr call_parens -> call_expr
    | "{" NAME ":" expr ("," NAME ":" expr)* "}" -> constructor_expr
    | expr "." NAME -> get_attr
    // | "(" expr ")"
    // | colon_access

// colon_access : NAME "::" NAME | colon_access "::" NAME
?call_parens : "(" [expr] ("," expr)* ")"

bin_op : "+" -> add
    | "-" -> sub
    | "*" -> mul
    | "/" -> div

NAME: /[^\W\d]\w*/
%ignore COMMENT
COMMENT: "//" /[^\n]*/ NEWLINE

%import common.SIGNED_NUMBER

%import common.WS
%import common.NEWLINE
%ignore WS