// basic functionality
// 1. concrete functions
// 2. structurally typed product types ({...})
// 3. object-type (existential) interfaces
// 4. class implementations

fn foo(a: i32, b: i32): i32 {
    let c = (a + b);
    let d = (a / c);
    return (d - c);
}

type Bar = {
    a: i32,
    b: i32
}

type Baz = {
    a: Bar,
    b: i32
}

fn foo2(a: Bar, b: Baz): i32 {
    return (a.b + a.b.c);
}

interface I1 {
    fn hello(this)
    fn hello1(this, other: Self)
}

class c1 for I1 {
    type This = {
        a: i32
    }

    fn new(a: i32): I1 {
        return { a: a };
    }

    fn hello(this) {
        print(this.a);
    }

    fn hello1(this, other: Self) {
        print(this.a);
        other.hello();
    }

    fn hello2(this) {
        this.hello();
        this.hello();
    }
}

fn say_hello(x: I1) {
    x.hello();
}

fn main() {
    let x: I1 = c1.new(1);
    let y = c1({ a: 1 });
    say_hello(x);
    say_hello(y);
}
