use std::str::FromStr;
use crate::ast::{Expr, Stmt, Decl, AST, Type, Var, Symbol, P, self};

grammar;

pub AST : AST = {<d:Decl*> => AST { decls: d }, }

pub Decl : Decl = {
    "type" <name:Ident> "=" <decl:Type> => Decl::TypeDecl { name, decl },
    <decl:FnDecl> => decl,
    <decl:FnDecl> <body:StmtBody> => {
        let Decl::FnDecl { name, args, ty } = decl else { unreachable!() };
        Decl::FnImpl {
            name, args, ty, body
        }
    }
}

pub FnDecl : Decl = {
    "fn" <name:Ident> "(" <args:Comma<Var>> ")" <ret:(":" <Type>)?> => {
        Decl::FnDecl {
            name, args, ty:ret.map_or(Type::Void, |x| x)
        }
    }
}

pub StmtBody: Vec<Stmt> = {
    "{" <stmts:Stmt*> "}" => stmts,
}

pub Stmt: Stmt = {
    "let" <v:Var> "=" <e:Expr> ";" => Stmt::LetStmt { var:v, expr:e },
    <e:Expr> ";" => Stmt::ExprStmt { expr:e },
//    <lhs:UnTypedVar> "=" <rhs:Expr> ";" => Stmt::AssignStmt { lhs, rhs },
    "return" <expr:Expr> ";" => Stmt::ReturnStmt { expr } 
}

pub Expr: Expr = {
    <n:Num> => Expr::IntLit(n),
    <v:Var> => Expr::Var(v),
    <e:Expr> "." <a:Ident> => Expr::GetAttr { exp: P(e), sym: a },
    "(" <l:Expr> "+" <r:Expr> ")" => Expr::Add { lhs:P(l), rhs:P(r) },
    <c:Ident> "(" <args:Comma<Expr>> ")" => Expr::Call { symbol:c, args },
    "{" <args:Comma<(<Ident> ":" <Expr>)>> "}" => Expr::Struct { args },
}

pub Type: Type = {
    "i32" => Type::I32,
    "{" <v:Comma<TypeVar>> "}" => {
        Type::from_var(v)
    },
    <s: Ident> => Type::Symbol(s)
}

pub Var: Var = {
    <v:UnTypedVar> => v,
    <v:TypeVar> => v
}

UnTypedVar : Var = <v:Ident> => Var { name : v, ty: None };
TypeVar : Var = <v:Ident> ":" <t:Type> => Var { name: v, ty: Some(t) };


Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
Ident: Symbol = <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => Symbol::from_str(s);