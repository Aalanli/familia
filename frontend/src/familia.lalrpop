use std::str::FromStr;
use crate::ast::{Loc, Ident, Tok, LexError};
use crate::ast::{
    Expr, ExprKind, 
    Stmt, StmtKind, 
    Decl, DeclKind, 
    Type, TypeKind, 
    Var, 
    P, 
    Path,
    self
};


grammar;

// modules are top-level for now, nested modules are to be supported later
pub AST : Decl = {
    <lloc:@L> <d:Decl*> <rloc:@L> => {
        let kind = DeclKind::Module { name: Ident::default(), file: None, top: true, decls: d };
        Decl { kind, span: lloc.span(rloc) }
    }, 
}

pub Decl : Decl = {
    <lloc:@L> <kind:DeclKind> <rloc:@L> => {
        Decl { kind, span: lloc.span(rloc) }
    },
}

DeclKind : DeclKind = {
    "type" <name:Ident> "=" <decl:Type> => {
        DeclKind::TypeDecl { name, decl }
    },
    <decl:FnDecl> => decl,
    <decl:FnDecl> <body:StmtBody> => {
        let DeclKind::FnDecl { name, args, ty } = decl else { unreachable!() };
        let kind = DeclKind::FnImpl {
            name, args, ty, body
        };
        kind
    },
    "class" <name:Ident> <for_it:("for" <Path>)?> <repr_ty:("(" <Path> ")")?> "{" <sub_decls:Decl*> "}" => {
        DeclKind::ClassImpl { name, sub_decls, for_it, repr_ty }
    },
    "interface" <name:Ident> "{" <sub_decls:Decl*> "}" => {
        DeclKind::InterfaceImpl { name, sub_decls }
    }
}

FnDecl : DeclKind = {
    "fn" <name:Ident> "(" <args:ArgList> ")" <tlloc:@L> <ret:(":" <Type>)?> <rloc:@L> => {
        let temp_void = Type { kind: TypeKind::Void, span: tlloc.span(rloc) };
        let kind = DeclKind::FnDecl {
            name, args, ty:ret.map_or(temp_void, |x| x)
        };
        kind
    }
}

ArgList : Vec<Var> = {
    <v: Comma<TypeVar>> => v,
    <t:ThisVar> <mut args:("," <TypeVar>)*> => {
        let mut v = vec![t];
        v.extend(args);
        v
    }
}

pub StmtBody: Vec<Stmt> = {
    "{" <stmts:Stmt*> "}" => stmts,
}

pub Stmt : Stmt = {
    <lloc:@L> <kind:StmtKind> <rloc:@L> => Stmt { kind, span: lloc.span(rloc) },
}

StmtKind: StmtKind = {
    "let" <v:Var> "=" <e:Expr> ";" => StmtKind::LetStmt { var:v, expr:e },
    <e:Expr> ";" => StmtKind::ExprStmt { expr:e },
    <lhs:Expr> "=" <rhs:Expr> ";" => StmtKind::AssignStmt { lhs, rhs },
    "return" <expr:Expr> ";" => StmtKind::ReturnStmt { expr } 
}

pub Expr : Expr = {
    <lloc:@L> <kind:ExprKind> <rloc:@L> => {
        Expr { kind, span: lloc.span(rloc) }
    },
}

ExprKind: ExprKind = {
    <n:Int> => ExprKind::IntLit(n),
    <s:String> => ExprKind::StringLit(s),
    <v:Var> => ExprKind::Var(v),
    <e:Expr> "." <a:Ident> "(" <args:Comma<Expr>> ")"  => ExprKind::MethodCall { exp: P(e), sym: a, args },
    <e:Expr> "." <a:Ident> => ExprKind::GetAttr { exp: P(e), sym: a },
    "(" <l:Expr> "+" <r:Expr> ")" => ExprKind::Add { lhs:P(l), rhs:P(r) },
    <c:Path> "(" <args:Comma<Expr>> ")" => ExprKind::Call { path:c, args },
    "{" <args:Comma<(<Ident> ":" <Expr>)>> "}" => ExprKind::Struct { args },
    "(" <e:ExprKind> ")" => e
}

pub Type : Type = {
    <lloc:@L> <kind:TypeKind> <rloc:@L> => {
        Type { kind, span: lloc.span(rloc) }
    },
}

TypeKind: TypeKind = {
    "()" => TypeKind::Void,
    "{" <fields:Comma<TypeVar>> "}" => {
        TypeKind::Struct { fields }
    },
    <s:Path> => TypeKind::Symbol(s)
}

pub Path: Path = {
    <lloc:@L> <mut v:(<Ident> "::")*> <e:Ident> <rloc:@L> => {
        v.push(e);
        Path { path: v, span: lloc.span(rloc) }
    }
}

pub Var: Var = {
    <v:UnTypedVar> => v,
    <v:TypeVar> => v,
    <v:ThisVar> => v
}

UnTypedVar : Var = <lloc:@L> <v:Ident> <rloc:@L> => Var { name : v, ty: None, span: lloc.span(rloc) };
TypeVar : Var = <lloc:@L> <v:Ident> ":" <t:Type> <rloc:@L> => Var { name: v, ty: Some(t), span: lloc.span(rloc) };
ThisVar : Var = <lloc:@L> "this" <rloc:@L> => { 
    let span = lloc.span(rloc);
    let ty = Type { kind: TypeKind::This, span };
    Var { name: Ident::new("this", span), ty: Some(ty), span } 
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};


extern {
    type Location = Loc;
    type Error = LexError;

    enum Tok {
        "interface" => Tok::Interface,
        "class" => Tok::Class,
        "type" => Tok::Type,
        "fn" => Tok::Fn,
        "for" => Tok::For,
        "let" => Tok::Let,
        "return" => Tok::Return,
        "this" => Tok::This,
        "+" => Tok::Plus,
        "=" => Tok::Equal,
        "." => Tok::Dot,
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "()" => Tok::DoubleParen,
        "{" => Tok::LBrace,
        "}" => Tok::RBrace,
        ":" => Tok::Colon,
        "::" => Tok::ColonAcc,
        ";" => Tok::SemiColon,
        "," => Tok::Comma,
        Ident => Tok::Ident(<Ident>),
        Int => Tok::Int(<i32>),
        String => Tok::String(<String>)
    }
}
